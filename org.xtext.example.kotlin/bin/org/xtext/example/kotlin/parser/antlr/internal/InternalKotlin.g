/*
 * generated by Xtext 2.12.0
 */
grammar InternalKotlin;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.kotlin.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.kotlin.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.kotlin.services.KotlinGrammarAccess;

}

@parser::members {

 	private KotlinGrammarAccess grammarAccess;

    public InternalKotlinParser(TokenStream input, KotlinGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected KotlinGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getWhenWhenParserRuleCall_0());
			}
			lv_when_0_0=ruleWhen
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				set(
					$current,
					"when",
					lv_when_0_0,
					"org.xtext.example.kotlin.Kotlin.When");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleWhen
entryRuleWhen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhenRule()); }
	iv_ruleWhen=ruleWhen
	{ $current=$iv_ruleWhen.current; }
	EOF;

// Rule When
ruleWhen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='when'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhenAccess().getWhenKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getWhenAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getWhenAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWhenRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getWhenAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getWhenAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhenAccess().getConditionConditionParserRuleCall_5_0());
				}
				lv_condition_5_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhenRule());
					}
					set(
						$current,
						"condition",
						lv_condition_5_0,
						"org.xtext.example.kotlin.Kotlin.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='->'
		{
			newLeafNode(otherlv_6, grammarAccess.getWhenAccess().getHyphenMinusGreaterThanSignKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhenAccess().getOutputOutputParserRuleCall_7_0());
				}
				lv_output_7_0=ruleOutput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhenRule());
					}
					set(
						$current,
						"output",
						lv_output_7_0,
						"org.xtext.example.kotlin.Kotlin.Output");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getWhenAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConditionAccess().getConditionAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_value_1_0=RULE_INT
					{
						newLeafNode(lv_value_1_0, grammarAccess.getConditionAccess().getValueINTTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			    |
			this_TEXT_2=RULE_TEXT
			{
				newLeafNode(this_TEXT_2, grammarAccess.getConditionAccess().getTEXTTerminalRuleCall_1_1());
			}
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getConditionAccess().getConditionalConditionalParserRuleCall_1_2_0_0());
						}
						lv_conditional_3_0=ruleConditional
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConditionRule());
							}
							set(
								$current,
								"conditional",
								lv_conditional_3_0,
								"org.xtext.example.kotlin.Kotlin.Conditional");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getConditionAccess().getTypeTypeParserRuleCall_1_2_1_0());
						}
						lv_type_4_0=ruleType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConditionRule());
							}
							set(
								$current,
								"type",
								lv_type_4_0,
								"org.xtext.example.kotlin.Kotlin.Type");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			otherlv_5='else'
			{
				newLeafNode(otherlv_5, grammarAccess.getConditionAccess().getElseKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleConditional
entryRuleConditional returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConditionalRule()); }
	iv_ruleConditional=ruleConditional
	{ $current=$iv_ruleConditional.current.getText(); }
	EOF;

// Rule Conditional
ruleConditional returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='!'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConditionalAccess().getExclamationMarkKeyword_0());
			}
		)?
		kw='is'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConditionalAccess().getIsKeyword_1());
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Long'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getLongKeyword_0());
		}
		    |
		kw='Int'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getIntKeyword_1());
		}
		    |
		kw='String'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getStringKeyword_2());
		}
	)
;

// Entry rule entryRuleOutput
entryRuleOutput returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current.getText(); }
	EOF;

// Rule Output
ruleOutput returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='println('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOutputAccess().getPrintlnKeyword_0());
		}
		this_TEXT_1=RULE_TEXT
		{
			$current.merge(this_TEXT_1);
		}
		{
			newLeafNode(this_TEXT_1, grammarAccess.getOutputAccess().getTEXTTerminalRuleCall_1());
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOutputAccess().getRightParenthesisKeyword_2());
		}
	)
;

RULE_TEXT : '"' ( options {greedy=false;} : . )*'"';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
