/*
 * generated by Xtext 2.12.0
 */
grammar InternalKotlin;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.kotlin.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.kotlin.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.kotlin.services.KotlinGrammarAccess;

}
@parser::members {
	private KotlinGrammarAccess grammarAccess;

	public void setGrammarAccess(KotlinGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getWhenAssignment()); }
		(rule__Model__WhenAssignment)
		{ after(grammarAccess.getModelAccess().getWhenAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhen
entryRuleWhen
:
{ before(grammarAccess.getWhenRule()); }
	 ruleWhen
{ after(grammarAccess.getWhenRule()); } 
	 EOF 
;

// Rule When
ruleWhen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhenAccess().getGroup()); }
		(rule__When__Group__0)
		{ after(grammarAccess.getWhenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getGroup()); }
		(rule__Condition__Group__0)
		{ after(grammarAccess.getConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditional
entryRuleConditional
:
{ before(grammarAccess.getConditionalRule()); }
	 ruleConditional
{ after(grammarAccess.getConditionalRule()); } 
	 EOF 
;

// Rule Conditional
ruleConditional 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalAccess().getGroup()); }
		(rule__Conditional__Group__0)
		{ after(grammarAccess.getConditionalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOutput
entryRuleOutput
:
{ before(grammarAccess.getOutputRule()); }
	 ruleOutput
{ after(grammarAccess.getOutputRule()); } 
	 EOF 
;

// Rule Output
ruleOutput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOutputAccess().getGroup()); }
		(rule__Output__Group__0)
		{ after(grammarAccess.getOutputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getValueAssignment_1_0()); }
		(rule__Condition__ValueAssignment_1_0)
		{ after(grammarAccess.getConditionAccess().getValueAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getTEXTTerminalRuleCall_1_1()); }
		RULE_TEXT
		{ after(grammarAccess.getConditionAccess().getTEXTTerminalRuleCall_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getGroup_1_2()); }
		(rule__Condition__Group_1_2__0)
		{ after(grammarAccess.getConditionAccess().getGroup_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getElseKeyword_1_3()); }
		'else'
		{ after(grammarAccess.getConditionAccess().getElseKeyword_1_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getLongKeyword_0()); }
		'Long'
		{ after(grammarAccess.getTypeAccess().getLongKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getIntKeyword_1()); }
		'Int'
		{ after(grammarAccess.getTypeAccess().getIntKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getStringKeyword_2()); }
		'String'
		{ after(grammarAccess.getTypeAccess().getStringKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__0__Impl
	rule__When__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getWhenKeyword_0()); }
	'when'
	{ after(grammarAccess.getWhenAccess().getWhenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__1__Impl
	rule__When__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getWhenAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__2__Impl
	rule__When__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getNameAssignment_2()); }
	(rule__When__NameAssignment_2)
	{ after(grammarAccess.getWhenAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__3__Impl
	rule__When__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getWhenAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__4__Impl
	rule__When__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getWhenAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__5__Impl
	rule__When__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getConditionAssignment_5()); }
	(rule__When__ConditionAssignment_5)
	{ after(grammarAccess.getWhenAccess().getConditionAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__6__Impl
	rule__When__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getHyphenMinusGreaterThanSignKeyword_6()); }
	'->'
	{ after(grammarAccess.getWhenAccess().getHyphenMinusGreaterThanSignKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__7__Impl
	rule__When__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getOutputAssignment_7()); }
	(rule__When__OutputAssignment_7)?
	{ after(grammarAccess.getWhenAccess().getOutputAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__When__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__When__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhenAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getWhenAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getConditionAction_0()); }
	()
	{ after(grammarAccess.getConditionAccess().getConditionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getAlternatives_1()); }
	(rule__Condition__Alternatives_1)
	{ after(grammarAccess.getConditionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group_1_2__0__Impl
	rule__Condition__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getConditionalAssignment_1_2_0()); }
	(rule__Condition__ConditionalAssignment_1_2_0)
	{ after(grammarAccess.getConditionAccess().getConditionalAssignment_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getTypeAssignment_1_2_1()); }
	(rule__Condition__TypeAssignment_1_2_1)
	{ after(grammarAccess.getConditionAccess().getTypeAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__0__Impl
	rule__Conditional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getExclamationMarkKeyword_0()); }
	('!')?
	{ after(grammarAccess.getConditionalAccess().getExclamationMarkKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getIsKeyword_1()); }
	'is'
	{ after(grammarAccess.getConditionalAccess().getIsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__0__Impl
	rule__Output__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getPrintlnKeyword_0()); }
	'println('
	{ after(grammarAccess.getOutputAccess().getPrintlnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__1__Impl
	rule__Output__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getTEXTTerminalRuleCall_1()); }
	RULE_TEXT
	{ after(grammarAccess.getOutputAccess().getTEXTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getOutputAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__WhenAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getWhenWhenParserRuleCall_0()); }
		ruleWhen
		{ after(grammarAccess.getModelAccess().getWhenWhenParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhenAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getWhenAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__ConditionAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhenAccess().getConditionConditionParserRuleCall_5_0()); }
		ruleCondition
		{ after(grammarAccess.getWhenAccess().getConditionConditionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__When__OutputAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhenAccess().getOutputOutputParserRuleCall_7_0()); }
		ruleOutput
		{ after(grammarAccess.getWhenAccess().getOutputOutputParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ValueAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getValueINTTerminalRuleCall_1_0_0()); }
		RULE_INT
		{ after(grammarAccess.getConditionAccess().getValueINTTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ConditionalAssignment_1_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getConditionalConditionalParserRuleCall_1_2_0_0()); }
		ruleConditional
		{ after(grammarAccess.getConditionAccess().getConditionalConditionalParserRuleCall_1_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__TypeAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getTypeTypeParserRuleCall_1_2_1_0()); }
		ruleType
		{ after(grammarAccess.getConditionAccess().getTypeTypeParserRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_TEXT : '"' ( options {greedy=false;} : . )*'"';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
